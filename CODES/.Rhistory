train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
library(xgboost)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 2, missing = 111222333)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
install.packages("pROC")
library(pROC)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
colnames(train)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category","registers_around_campStart","registration_num_overall",
"registration_num_camp_cat", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
dim(train)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 0, missing = 111222333)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.005,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
train = copy(train.orig)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 8,
eta = 0.005,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
colnames(train)
summary(test$First_Interaction)
any(is.na(test$First_Interaction))
any(is.na(profile$First_Interaction))
summary(train.orig)
setorder(train,"Patient_ID","Registration_Date")
train[,tmp_ind:=1:.N,by="Patient_ID"]
train = copy(train.orig)
setorder(train,"Patient_ID","Registration_Date")
train[,tmp_ind:=1:.N,by="Patient_ID"]
tt = train[tmp_ind==1,]
tt$Camp_End_Date = as.Date(tt$Camp_End_Date)
tt$Camp_Start_Date = as.Date(tt$Camp_Start_Date)
any((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==F, na.rm=T)
length(which((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==F, na.rm=T))
length(which((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==F))
length(which((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==T))
library(data.table)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
#................................
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
summary(train)
sum(Outcome[1:registration_num_overall]
)
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
library(data.table)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
t2 <- patient.outcome.sum(df=train)
head(train)
df <- train
setorder(df,"Patient_ID","Registration_Date")
head(train)
df$patient_outcome_sum <- NA
head(train)
head(df)
df[(registration_num_overall > 0),
(patient_outcome_sum := sum(Outcome[1:registration_num_overall])) ,
by= c("Patient_ID") ]
?:=
?":="
df[(registration_num_overall > 0),
(patient_outcome_sum := sum(Outcome[1:registration_num_overall])) ,
by= c("Patient_ID") ]
is.data.table(df)
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- NA
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
return (df)
df$patient_outcome_sum <- 1000
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
df <- train
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- 1000
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
df$patient_outcome_sum <- as.integer(-123)
df <- train
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- as.integer(-123)
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
warnings()\
warnings()
df <-train
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- as.integer(-123)
df[registration_num_overall > 0,
patient_outcome_sum := as.integer(sum(Outcome[1:registration_num_overall])),
by= "Patient_ID" ]
head(df)
head(df[(df$patient_outcome_sum > 1),])
patient.outcome.sum <- function(df){
setorder(df,"Patient_ID","Registration_Date")
}
df <- train
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- NA
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
df$patient_outcome_sum <- -123
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
df$patient_outcome_sum <- as.integer(-123)
df <- train
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- as.integer(-123)
df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
by= "Patient_ID" ]
head(df)
View(df)
df <- train
df <- data.table(df)
setorder(df,"Patient_ID","Registration_Date")
df$patient_outcome_sum <- as.integer(-123)
df[registration_num_overall > 0,
patient_outcome_sum := cumsum(Outcome), by=list(Patient_ID)]
#df[registration_num_overall > 0, patient_outcome_sum := sum(Outcome[1:registration_num_overall]),
#   by= "Patient_ID" ]
View(df)
df[df$Patient_ID== 493203]
df[df$patient_outcome_sum == -123] <- NA
df$patient_outcome_sum[df$patient_outcome_sum == -123] <- NA
head(df)
library(data.table)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
#................................
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
summary(train)
sapply(train,class)
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
#................................
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
sapply(test,class)
write.csv(test,file="../DERIVED/test_hist_feat_merged.csv", row.names=F)
#.....................................
#.....................................
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
#.....................................
library(xgboost)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
model_xgb <- xgb.train(data=train.xg, nrounds = 1500,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
write.csv(imp_xgb, file = "../MODEL/imp_xgb.csv", row.names=F)
#......................................
library(pROC)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb[preds_xgb>0.3]=1
preds_xgb[preds_xgb<0.3]=0
#......................................
library(caret)
c = confusionMatrix(preds_xgb,y_val,positive = "1")
install.packages("xgboost")
install.packages("caret")
library(data.table)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
#................................
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
head(train)
train$con_rate <- train$registration_num_overall / train$patient_outcome_sum
summary(train)
sapply(train,class)
head(train)
library(data.table)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
#................................
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
train$con_rate <- train$registration_num_overall / train$patient_outcome_sum
train$con_rate[is.infinite(train$con_rate) ] <- NA
head(train)
library(data.table)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
#................................
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
train$con_rate <- train$registration_num_overall / train$patient_outcome_sum
train$con_rate[is.infinite(train$con_rate) ] <- NA
head(train)
summary(train)
sapply(train,class)
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
#................................
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
sapply(test,class)
write.csv(test,file="../DERIVED/test_hist_feat_merged.csv", row.names=F)
#.....................................
#.....................................
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
#.....................................
library(xgboost)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
model_xgb <- xgb.train(data=train.xg, nrounds = 1500,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
write.csv(imp_xgb, file = "../MODEL/imp_xgb.csv", row.names=F)
#......................................
library(pROC)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb[preds_xgb>0.3]=1
preds_xgb[preds_xgb<0.3]=0
#......................................
library(caret)
c = confusionMatrix(preds_xgb,y_val,positive = "1")
install.packages("pROC")
#......................................
library(pROC)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb[preds_xgb>0.3]=1
preds_xgb[preds_xgb<0.3]=0
#......................................
library(caret)
c = confusionMatrix(preds_xgb,y_val,positive = "1")
install.packages("e1071")
#......................................
library(caret)
c = confusionMatrix(preds_xgb,y_val,positive = "1")
c
head(preds_xgb)
library(data.table)
test = read.csv("../DERIVED/test_hist_feat_merged.csv")
test = data.table(test)
#...............................
test.orig = copy(test)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
test <- subset(test,select = !(colnames(test)%in% drop.cols))
#...............................
x_test = copy(test)
cols.fac <- names(which(sapply(test,class)=="factor"))
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test[is.na(x_test)] = 111222333
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=111222333)
#...............................
preds_xgb_test = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
test.orig[,Outcome:=preds_xgb_test]
#...............................
scored <- subset(test.orig, select = c(Patient_ID,Health_Camp_ID,Outcome))
write.csv(scored, file="../DERIVED/Submission_V3.csv", row.names=F)
