library(data.table)
library(ggplot2)
train = read.csv(file="../DERIVED/train_with_Outcome.csv")
train=data.table(train)
dim(train)
summary(train)
setwd("E:/StudyWork/Kaggle/Knocktober/CODES")
library(data.table)
train = read.csv("../DERIVED/train_outcome_camp_details.csv")
train = data.table(train)
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
summayr(profile)
summary(profile)
train = merge(train, profile, by = c("Patient_ID"))
colnames(train)
train.orig = copy(train)
train = subset(train, select = c(-Patient_ID))
train.orig = copy(train)
colnames(train)
train = read.csv("../DERIVED/train_outcome_camp_details.csv")
train = data.table(train)
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
train = merge(train, profile, by = c("Patient_ID"))
train.orig = copy(train)
sapply(profile, class)
unique(profile$Education_Score)
unique(profile$Employer_Category)
sapply(profile, class)
as.character(NA)
train = read.csv("../DERIVED/train_outcome_camp_details.csv")
train = data.table(train)
train[,":="(Camp_Start_Month = strftime(Camp_Start_Date,"%m"),
Camp_Start_wkDay = strftime(Camp_Start_Date,"%u"),
Registration_Month = strftime(Registration_Date,"%m"),
Registration_wkDay = strftime(Registration_Date,"%u"))]
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
summary(train)
train = read.csv("../DERIVED/train_outcome_camp_details.csv")
train = data.table(train)
train[,":="(Camp_Start_Month = as.integer(strftime(Camp_Start_Date,"%m")),
Camp_Start_wkDay = as.integer(strftime(Camp_Start_Date,"%u")),
Registration_Month = as.integer(strftime(Registration_Date,"%m")),
Registration_wkDay = as.integer(strftime(Registration_Date,"%u")))]
summayr(train)
summary(train)
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
cols_withNA = c("Income","Education_Score","Age")
profile <- profile[,(cols_withNA):=lapply(.SD,function(x){x[x=="None"]=NA}), .SDcols = cols_withNA]
cols_withBlank = c("City_Type","Employer_Category")
profile <- profile[,(cols_withBlank):=lapply(.SD,function(x){x[x==""]=NA}), .SDcols = cols_withBlank]
profile[,":="(Education_Score = as.numeric(as.character(Education_Score)),
Age = as.integer(as.character(Education_Score)))]
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
cols_withNA = c("Income","Education_Score","Age")
profile[,(cols_withNA):=lapply(.SD,function(x){x[x=="None"]=NA}), .SDcols = cols_withNA]
head(which(profile$Income=="None"))
profile[,(cols_withNA)=lapply(.SD,function(x){x[x=="None"]=NA}), .SDcols = cols_withNA]
profile[,lapply(.SD,function(x){x[x=="None"]=NA}), .SDcols = cols_withNA]
a=c(1,2,3,4)
a[a==1]=NA
a
dim(profile)
profile[,(cols_withNA):=lapply(.SD,function(x){x[x=="None"]=NA
return (x)}), .SDcols = cols_withNA]
summary(profile)
cols_withBlank = c("City_Type","Employer_Category")
profile[,(cols_withBlank):=lapply(.SD,function(x){x[x==""]=NA
return (x)}), .SDcols = cols_withBlank]
profile[,":="(Education_Score = as.numeric(as.character(Education_Score)),
Age = as.integer(as.character(Education_Score)))]
summary(profile)
train = merge(train, profile, by = c("Patient_ID"))
colnames(train)
dates = sort(unique(train$Camp_Start_Date))
length(dates)
dates
sapply(train,class)
head(train)
dim(train)
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[,Camp_Start_Date %in% dates[31:40]]
train <- train[,Camp_Start_Date %in% dates[1:30]]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
class(train)
train = copy(train.orig)
class(train)
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
colnames(x_train)
colnames(x_val)
?xgboost
library(xgboost)
install.packages("xgboost")
library(xgboost)
?xgboost
train[is.na(train)] = 111222333
val[is.na(val)] = 111222333
train = copy(train.orig)
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5,
base_score =0)
?xgboost
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 2)
unique(y_train)
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 2, missing = 111222333)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
dim(x_train)
imp_xgb
write.csv(imp_xgb, file = "../MODEL/imp_xgb.csv", row.names=F)
install.packages("sqldf")
library(data.table)
setwd("E:/StudyWork/Kaggle/Knocktober/CODES")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
summary(train)
source("lib.R")
test = read.csv("../RAW/Test_D7W1juQ.csv")
test = data.table(test)
any(is.na(test))
health_camp <- read.csv("../RAW/Health_Camp_Detail.csv")
health_camp <- data.table(health_camp)
health_camp[,":="(Camp_Start_Date = as.Date(Camp_Start_Date),
Camp_End_Date = as.Date(Camp_End_Date))]
health_camp$Category3 = as.factor(health_camp$Category3)
test = merge(test, health_camp, by = c("Health_Camp_ID"), all.x=T)
any(is.na(test))
write.csv(test, file="../DERIVED/test_camp_details.csv", row.names = F)
test = read.csv("../DERIVED/test_camp_details.csv")
test = data.table(test)
test[,":="(Camp_Start_Month = as.integer(strftime(Camp_Start_Date,"%m")),
Camp_Start_wkDay = as.integer(strftime(Camp_Start_Date,"%u")),
Registration_Month = as.integer(strftime(Registration_Date,"%m")),
Registration_wkDay = as.integer(strftime(Registration_Date,"%u")))]
summary(test)
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
cols_withNA = c("Income","Education_Score","Age")
profile[,(cols_withNA):=lapply(.SD,function(x){x[x=="None"]=NA
return (x)}), .SDcols = cols_withNA]
cols_withBlank = c("City_Type","Employer_Category")
profile[,(cols_withBlank):=lapply(.SD,function(x){x[x==""]=NA
return (x)}), .SDcols = cols_withBlank]
profile[,":="(Education_Score = as.numeric(as.character(Education_Score)),
Age = as.integer(as.character(Education_Score)))]
summary(profile)
test = merge(test, profile, by = c("Patient_ID"))
summayr(test)
summary(test)
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
sapply(train,class)
sapply(test,class)
dim(train)
dim(test)
train <- registration.around.campStart(df=train)
summary(train$registers_around_campStart)
train <- num.repeated.registration(df = train)
summary(train$registration_num_overall)
summary(train$registration_num_camp_cat)
train <- time.of.association(df=train)
summary(train)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- registration.around.campStart(df=test)
head(as.Date(test$Registration_Date))
test = read.csv("../RAW/Test_D7W1juQ.csv")
head(as.Date(test$Registration_Date))
test = data.table(test)
any(is.na(test))
test = merge(test, health_camp, by = c("Health_Camp_ID"), all.x=T)
any(is.na(test))
write.csv(test, file="../DERIVED/test_camp_details.csv", row.names = F)
test = read.csv("../DERIVED/test_camp_details.csv")
test = data.table(test)
test[,":="(Camp_Start_Month = as.integer(strftime(Camp_Start_Date,"%m")),
Camp_Start_wkDay = as.integer(strftime(Camp_Start_Date,"%u")),
Registration_Month = as.integer(strftime(Registration_Date,"%m")),
Registration_wkDay = as.integer(strftime(Registration_Date,"%u")))]
summary(test)
test = merge(test, profile, by = c("Patient_ID"))
write.csv(test,file="../DERIVED/test_all_merged.csv", row.names = F)
sapply(test,class)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
sapply(test,class)
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
write.csv(test,file="../DERIVED/test_hist_feat_merged.csv", row.names=F)
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
library(xgboost)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 2, missing = 111222333)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
install.packages("pROC")
library(pROC)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
colnames(train)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category","registers_around_campStart","registration_num_overall",
"registration_num_camp_cat", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
dim(train)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 0, missing = 111222333)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
param <- list(max_depth = 8,
eta = 0.005,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
train = copy(train.orig)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 8,
eta = 0.005,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 800,
params = param, verbose = 0, missing = 111222333)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
colnames(train)
summary(test$First_Interaction)
any(is.na(test$First_Interaction))
any(is.na(profile$First_Interaction))
summary(train.orig)
setorder(train,"Patient_ID","Registration_Date")
train[,tmp_ind:=1:.N,by="Patient_ID"]
train = copy(train.orig)
setorder(train,"Patient_ID","Registration_Date")
train[,tmp_ind:=1:.N,by="Patient_ID"]
tt = train[tmp_ind==1,]
tt$Camp_End_Date = as.Date(tt$Camp_End_Date)
tt$Camp_Start_Date = as.Date(tt$Camp_Start_Date)
any((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==F, na.rm=T)
length(which((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==F, na.rm=T))
length(which((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==F))
length(which((tt$First_Interaction>=tt$Camp_Start_Date & tt$First_Interaction<=tt$Camp_End_Date)==T))
