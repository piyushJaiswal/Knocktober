x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test[is.na(x_test)] = 111222333
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=111222333)
#...............................
preds_xgb_test = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
test.orig[,Outcome:=preds_xgb_test]
#...............................
scored <- subset(test.orig, select = c(Patient_ID,Health_Camp_ID,Outcome))
write.csv(scored, file="../DERIVED/Submission_V5.csv", row.names=F)
dim(test)
summary(train)
imp_xgb
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
train <- train[!(is.na(Registration_Date)),]
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
train$con_rate <- train$patient_outcome_sum/ train$registration_num_overall
train$con_rate[is.infinite(train$con_rate)] <- NA
train[,patient_outcome_sum:=NULL]
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
dat_common<- subset(train, Patient_ID %in% unique(test$Patient_ID))
setorder(dat_common, "Patient_ID",-"Registration_Date")
dat_common[,tmp_ind:=1:.N,by = "Patient_ID"]
s = dat_common[tmp_ind==1,c("Patient_ID","con_rate"),with=F]
test <- merge(test, s, by = "Patient_ID")
dim(train)
dim(test)
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
test <- merge(test, s, by = "Patient_ID", all.x=T)
dim(test)
sapply(test,class)
summayr(test$con_rate)
summary(test$con_rate)
write.csv(test,file="../DERIVED/test_hist_feat_merged.csv", row.names=F)
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
model_xgb <- xgb.train(data=train.xg, nrounds = 2000,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
test.orig = copy(test)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
test <- subset(test,select = !(colnames(test)%in% drop.cols))
#...............................
x_test = copy(test)
cols.fac <- names(which(sapply(test,class)=="factor"))
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test[is.na(x_test)] = 111222333
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=111222333)
#...............................
preds_xgb_test = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
test.orig[,Outcome:=preds_xgb_test]
#...............................
scored <- subset(test.orig, select = c(Patient_ID,Health_Camp_ID,Outcome))
dim(test)
write.csv(scored, file="../DERIVED/Submission_V6.csv", row.names=F)
install.packages("randomForest")
library(randomForest)
?randomForest
y_train <- train$Outcome
x_train = copy(train)
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val[,Outcome:=NULL]
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 500, importance = T, nodesize = 10, keep.forest = T)
class(y_train)
y_train <- as.factor(train$Outcome)
y_val <- as.factor(val$Outcome)
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 500, importance = T, nodesize = 10, keep.forest = T)
t = data.table(A=c(1,1,1,2,2,2,3,3,3),b=c(1,4,3,5,4,7,9,2,1))
t
t[,c:=c[-.N],by = A]
t[,x:=c(c[-.N]),by = A]
t[,x:=c(c[-.N])]
t = data.table(A=c(1,1,1,2,2,2,3,3,3),b=c(1,4,3,5,4,7,9,2,1))
t[,x:=c(b[-.N]),by = A]
t
t[,x:=c(NA,b[-.N]),by = A]
t
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
train <- train[!(is.na(Registration_Date)),]
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
source("lib.R")
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
train$con_rate <- train$patient_outcome_sum/ train$registration_num_overall
train$con_rate[is.infinite(train$con_rate)] <- -1
train[,patient_outcome_sum:=NULL]
summary(train)
dim(train)
train <- consecutive.camps.interval(df = train)
source("lib.R")
train <- consecutive.camps.interval(df = train)
source("lib.R")
train <- consecutive.camps.interval(df = train)
summary(train$last_camp_time_diff)
dim(train)
train[,last_camp_time_diff:=NULL]
df = copy(train)
df <- data.table(df)
city_camp <- unique(df[!(is.na(City_Type)),c("Health_Camp_ID","Camp_Start_Date","Category1","City_Type"),with=F])
head(city_camp)
city_camp[,tmp_ind := 1:.N,by = c("City_Type","Category1")]
head(city_camp)
city_camp[,prev_Camp_Start_Date := c(-1,Camp_Start_Date[-.N]),by = c("City_Type","Category1")]
head(city_camp)
city_camp[,prev_Camp_Start_Date := c(NA,Camp_Start_Date[-.N]),by = c("City_Type","Category1")]
head(city_camp)
city_camp <- unique(df[!(is.na(City_Type)),c("Health_Camp_ID","Camp_Start_Date","Category1","City_Type"),with=F])
setorder(city_camp,"City_Type","Category1","Camp_Start_Date")
city_camp[,tmp_ind := 1:.N,by = c("City_Type","Category1")]
head(city_camp)
city_camp[,prev_Camp_Start_Date := c(NA,as.Date(Camp_Start_Date[-.N])),by = c("City_Type","Category1")]
head(city_camp)
city_camp[,prev_Camp_Start_Date := as.Date(prev_Camp_Start_Date, origin = "1970-01-01")]
head(city_camp)
city_camp[,last_camp_time_diff:= as.numeric(Camp_Start_Date - prev_Camp_Start_Date)]
head(city_camp)
city_camp[,is.na(last_camp_time_diff), last_camp_time_diff:=-1]
summary(city_camp$last_camp_time_diff)
dim(train)
rm(df)
city_camp[is.na(last_camp_time_diff), last_camp_time_diff:=-1]
summary(city_camp$last_camp_time_diff)
source("lib.R")
train <- consecutive.camps.interval(df = train)
summary(train$last_camp_time_diff)
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
dat_common<- subset(train, Patient_ID %in% unique(test$Patient_ID))
setorder(dat_common, "Patient_ID",-"Registration_Date")
dat_common[,tmp_ind:=1:.N,by = "Patient_ID"]
s = dat_common[tmp_ind==1,c("Patient_ID","con_rate"),with=F]
test <- merge(test, s, by = "Patient_ID", all.x=T)
test[registration_num_overall==0,con_rate:=-1]
test <- consecutive.camps.interval(df = test)
colnames(train)
colnames(test)
write.csv(test,file="../DERIVED/test_hist_feat_merged.csv", row.names=F)
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
gc()
model_xgb <- xgb.train(data=train.xg, nrounds = 1500,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
dim(train.orig)
dim(test)
test.orig = copy(test)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
test <- subset(test,select = !(colnames(test)%in% drop.cols))
#...............................
x_test = copy(test)
cols.fac <- names(which(sapply(test,class)=="factor"))
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test[is.na(x_test)] = 111222333
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=111222333)
#...............................
preds_xgb_test = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
test.orig[,Outcome:=preds_xgb_test]
#...............................
scored <- subset(test.orig, select = c(Patient_ID,Health_Camp_ID,Outcome))
write.csv(scored, file="../DERIVED/Submission_V7.csv", row.names=F)
source("lib.R")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
train <- train[!(is.na(Registration_Date)),]
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
train$con_rate <- train$patient_outcome_sum/ train$registration_num_overall
train$con_rate[is.infinite(train$con_rate)] <- -1
train[,patient_outcome_sum:=NULL]
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
dat_common<- subset(train, Patient_ID %in% unique(test$Patient_ID))
setorder(dat_common, "Patient_ID",-"Registration_Date")
dat_common[,tmp_ind:=1:.N,by = "Patient_ID"]
s = dat_common[tmp_ind==1,c("Patient_ID","con_rate"),with=F]
test <- merge(test, s, by = "Patient_ID", all.x=T)
test[registration_num_overall==0,con_rate:=-1]
train[,tag:="train"]
test[,tag:="test"]
test[,Outcome:=0]
dat_common <- rbind(train,test)
dat_common <- consecutive.camps.interval(df = dat_common)
train = dat_common[tag=="train",]
test <- dat_common[tag=="test",]
dim(train)
dim(test)
test[,Outcome:=NULL]
write.csv(train,file="../DERIVED/train_hist_feat_merged.csv", row.names=F)
write.csv(test,file="../DERIVED/test_hist_feat_merged.csv", row.names=F)
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
dim(x_train)
dim(x_va;)
dim(x_val)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
library(xgboost)
class(y_train)
colnames(x_train)
train[,tag:=NULL]
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
train <- train[!(is.na(Registration_Date)),]
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
train <- patient.outcome.sum(df=train)
train$con_rate <- train$patient_outcome_sum/ train$registration_num_overall
train$con_rate[is.infinite(train$con_rate)] <- -1
train[,patient_outcome_sum:=NULL]
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
dat_common<- subset(train, Patient_ID %in% unique(test$Patient_ID))
setorder(dat_common, "Patient_ID",-"Registration_Date")
dat_common[,tmp_ind:=1:.N,by = "Patient_ID"]
s = dat_common[tmp_ind==1,c("Patient_ID","con_rate"),with=F]
test <- merge(test, s, by = "Patient_ID", all.x=T)
test[registration_num_overall==0,con_rate:=-1]
train[,tag:="train"]
test[,tag:="test"]
test[,Outcome:=0]
dat_common <- rbind(train,test)
dat_common <- consecutive.camps.interval(df = dat_common)
train = dat_common[tag=="train",]
test <- dat_common[tag=="test",]
test[,Outcome:=NULL]
train[,tag:=NULL]
test[,tag:=NULL]
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
model_xgb <- xgb.train(data=train.xg, nrounds = 1500,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
dim(tets)
dim(test)
dim(train.orig)
test.orig = copy(test)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category", "time_association")
test <- subset(test,select = !(colnames(test)%in% drop.cols))
#...............................
x_test = copy(test)
cols.fac <- names(which(sapply(test,class)=="factor"))
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test[is.na(x_test)] = 111222333
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=111222333)
#...............................
preds_xgb_test = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
test.orig[,Outcome:=preds_xgb_test]
#...............................
scored <- subset(test.orig, select = c(Patient_ID,Health_Camp_ID,Outcome))
write.csv(scored, file="../DERIVED/Submission_V7.csv", row.names=F)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
imp_xgb
table(y_train)
37162/9863
table(y_val)
17444/10475
train = copy(train.orig)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
colnames(train)
param <- list(max_depth = 5,
eta = 0.002,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
model_xgb <- xgb.train(data=train.xg, nrounds = 1500,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
train = copy(train.orig)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
model_xgb <- xgb.train(data=train.xg, nrounds = 1500,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
test = copy(test.orig)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category")
test <- subset(test,select = !(colnames(test)%in% drop.cols))
#...............................
x_test = copy(test)
cols.fac <- names(which(sapply(test,class)=="factor"))
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test[is.na(x_test)] = 111222333
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=111222333)
#...............................
preds_xgb_test = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
test.orig[,Outcome:=preds_xgb_test]
#...............................
scored <- subset(test.orig, select = c(Patient_ID,Health_Camp_ID,Outcome))
write.csv(scored, file="../DERIVED/Submission_V8.csv", row.names=F)
